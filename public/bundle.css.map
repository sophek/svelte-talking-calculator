{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../src/components/Calculator.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import { onMount } from \"svelte\";\n  import formatMoney from \"accounting-js/lib/formatMoney.js\";\n\n  //TextToSpeech.talk(\"Hello Beautiful World!\");\n  let previous = null;\n  let display = 0;\n  let operator = null;\n  let operatorClicked = false;\n  let decimalCount = 0;\n\n  const keys = [\n    \"AC\",\n    \"+/-\",\n    \"%\",\n    \"รท\",\n    7,\n    8,\n    9,\n    \"x\",\n    4,\n    5,\n    6,\n    \"-\",\n    1,\n    2,\n    3,\n    \"+\",\n    0,\n    \".\",\n    \"C\",\n    \"=\"\n  ];\n\n  const sign = () => {\n    display =\n      display < 0\n        ? (display = display - display * 2)\n        : (display = display - display * 2);\n  };\n\n  const percent = () => {\n    display = display / 100;\n  };\n\n  const append = number => () => {\n    //sayIt(number);\n\n    //Check if there is a decimal, if so increase the decimal count\n    if (display.toString().indexOf(\".\") > -1) {\n      decimalCount += 1;\n    }\n    //If there is a decimal and the next number is a decimal just return true\n    if (decimalCount > 1 && number === \".\") {\n      return;\n    }\n\n    if (operatorClicked === true) {\n      display = \"\";\n      operatorClicked = false;\n    }\n    display = display === 0 ? (display = number) : \"\" + display + number;\n    console.log(\"operatorClicked\", operatorClicked);\n  };\n\n  const functionFactory = func => () => {\n    sayIt(formatMoney(display));\n    let operatorAction = \"\";\n    switch (func) {\n      case \"AC\":\n        operatorAction = clear();\n        break;\n      case \"+\":\n        operatorAction = add();\n        sayIt(\"plus\");\n        break;\n      case \"x\":\n        operatorAction = multiply();\n        sayIt(\"times\");\n        break;\n      case \"รท\":\n        operatorAction = divide();\n        sayIt(\"divide by\");\n        break;\n      case \"-\":\n        operatorAction = subtract();\n        sayIt(\"subtract\");\n        break;\n      case \"=\":\n        sayIt(\"equal\");\n        operatorAction = equal();\n        break;\n      case \"C\":\n        sayIt(\"clear\");\n        operatorAction = clear();\n        break;\n      case \"%\":\n        sayIt(\"percent\");\n        operatorAction = percent();\n        break;\n      case \"+/-\":\n        operatorAction = sign();\n        break;\n      default:\n        operatorAction = \"\";\n    }\n    if (operatorAction !== \"\") {\n      decimalCount = 0;\n    }\n    return operatorAction;\n  };\n\n  const decimal = () => {\n    if (display.indexOf(\".\") === -1) {\n      append(\".\");\n    }\n  };\n\n  const divide = () => {\n    operator = (a, b) => a / b;\n    previous = display;\n    operatorClicked = true;\n  };\n\n  const multiply = () => {\n    operator = (a, b) => a * b;\n    previous = display;\n    operatorClicked = true;\n  };\n\n  const subtract = () => {\n    operator = (a, b) => a - b;\n    previous = display;\n    operatorClicked = true;\n  };\n\n  const add = () => {\n    console.log(\"add\");\n    operator = (a, b) => a + b;\n    previous = display;\n    operatorClicked = true;\n  };\n\n  const equal = () => {\n    console.log(\"equal\");\n    display = operator(Number(previous), Number(display));\n    sayIt(formatMoney(display));\n    previous = null;\n    operatorClicked = true;\n  };\n\n  const clear = () => (display = \"\");\n\n  const operatorString = operator => {\n    if (operator === \".\") {\n      return \"\";\n    }\n    return isNaN(operator) ? operator : \"\";\n  };\n\n  const sayIt = phrase => {\n    if (\"speechSynthesis\" in window) {\n      var msg = new SpeechSynthesisUtterance(phrase);\n      window.speechSynthesis.speak(msg);\n    }\n  };\n\n  onMount(async () => {\n    // const res = await fetch(\n    //   `https://jsonplaceholder.typicode.com/photos?_limit=20`\n    // );\n    // photos = await res.json();\n    // console.log(photos);\n  });\n</script>\n\n<style>\n  .keypad {\n    display: grid;\n    grid-template-columns: repeat(4, 5em);\n    grid-template-rows: repeat(5, 3em);\n    grid-gap: 0em;\n  }\n\n  button {\n    margin: 0;\n    border-bottom: solid 1px black;\n    border-right: solid 1px black;\n    border-top: none;\n    border-left: none;\n    border-radius: 0px;\n    height: 2.98em;\n    border-color: #000;\n  }\n\n  .button.is-warning,\n  .button.is-primary {\n    border-color: #000;\n  }\n\n  .calculator {\n    width: 500px;\n    margin-top: 100px;\n  }\n\n  .display {\n    width: 320px;\n    margin-top: -27px;\n    position: absolute;\n    font-size: 1.5rem;\n    border: solid 1px #000;\n    height: 50px;\n    padding: 10px;\n  }\n</style>\n\n<div class=\"columns calculator\">\n  <div class=\"column\">\n    <div class=\"columns\">\n      <div class=\"column\">\n        <h1 class=\"display\">{display}</h1>\n      </div>\n    </div>\n    <div class=\"columns\">\n      <div class=\"column\">\n        <div class=\"keypad\">\n          {#each keys as key}\n            <button\n              class={operatorString(key) === '' ? 'button is-primary' : 'button is-warning'}\n              on:click={operatorString(key) === '' ? append(key) : functionFactory(key)}>\n              {key}\n            </button>\n          {/each}\n        </div>\n      </div>\n    </div>\n  </div>\n\n</div>\n"
  ],
  "names": [],
  "mappings": "AAiLE,OAAO,cAAC,CAAC,AACP,OAAO,CAAE,IAAI,CACb,qBAAqB,CAAE,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CACrC,kBAAkB,CAAE,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAClC,QAAQ,CAAE,GAAG,AACf,CAAC,AAED,MAAM,cAAC,CAAC,AACN,MAAM,CAAE,CAAC,CACT,aAAa,CAAE,KAAK,CAAC,GAAG,CAAC,KAAK,CAC9B,YAAY,CAAE,KAAK,CAAC,GAAG,CAAC,KAAK,CAC7B,UAAU,CAAE,IAAI,CAChB,WAAW,CAAE,IAAI,CACjB,aAAa,CAAE,GAAG,CAClB,MAAM,CAAE,MAAM,CACd,YAAY,CAAE,IAAI,AACpB,CAAC,AAED,OAAO,yBAAW,CAClB,OAAO,WAAW,cAAC,CAAC,AAClB,YAAY,CAAE,IAAI,AACpB,CAAC,AAED,WAAW,cAAC,CAAC,AACX,KAAK,CAAE,KAAK,CACZ,UAAU,CAAE,KAAK,AACnB,CAAC,AAED,QAAQ,cAAC,CAAC,AACR,KAAK,CAAE,KAAK,CACZ,UAAU,CAAE,KAAK,CACjB,QAAQ,CAAE,QAAQ,CAClB,SAAS,CAAE,MAAM,CACjB,MAAM,CAAE,KAAK,CAAC,GAAG,CAAC,IAAI,CACtB,MAAM,CAAE,IAAI,CACZ,OAAO,CAAE,IAAI,AACf,CAAC"
}